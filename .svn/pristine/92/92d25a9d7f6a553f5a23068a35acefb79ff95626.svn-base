package com.huashidai.weihuotong.service.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.huashidai.weihuotong.domain.Account;
import com.huashidai.weihuotong.domain.Address;
import com.huashidai.weihuotong.domain.Customer;
import com.huashidai.weihuotong.domain.Goods;
import com.huashidai.weihuotong.domain.Product;
import com.huashidai.weihuotong.domain.ProductOrder;
import com.huashidai.weihuotong.domain.ProductOrderItem;
import com.huashidai.weihuotong.domain.ProxyGoods;
import com.huashidai.weihuotong.domain.ProxyOrder;
import com.huashidai.weihuotong.domain.Store;
import com.huashidai.weihuotong.domain.TotalOrder;
import com.huashidai.weihuotong.domain.User;
import com.huashidai.weihuotong.domain.paramList.ProductOrderItemList;
import com.huashidai.weihuotong.exception.LogicException;
import com.huashidai.weihuotong.mapper.AddressMapper;
import com.huashidai.weihuotong.mapper.GoodsMapper;
import com.huashidai.weihuotong.mapper.ProductMapper;
import com.huashidai.weihuotong.mapper.ProductOrderItemMapper;
import com.huashidai.weihuotong.mapper.ProductOrderMapper;
import com.huashidai.weihuotong.mapper.ProxyGoodsMapper;
import com.huashidai.weihuotong.mapper.ProxyOrderMapper;
import com.huashidai.weihuotong.mapper.StoreMapper;
import com.huashidai.weihuotong.mapper.TotalOrderMapper;
import com.huashidai.weihuotong.mapper.UserMapper;
import com.huashidai.weihuotong.query.PageResult;
import com.huashidai.weihuotong.query.ProductOrderQuery;
import com.huashidai.weihuotong.service.IAccountFlowService;
import com.huashidai.weihuotong.service.IAccountService;
import com.huashidai.weihuotong.service.IProductOrderService;
import com.huashidai.weihuotong.utils.ConstUtil;
import com.huashidai.weihuotong.utils.OrderNumUtil;
import com.huashidai.weihuotong.utils.ReadProperties;
import com.huashidai.weihuotong.utils.StateCode;

@Service
public class ProductOrderServiceImpl implements IProductOrderService {

	@Autowired
	private ProductMapper productMapper;
	@Autowired
	private GoodsMapper goodsMapper;
	@Autowired
	private ProductOrderMapper productOrderMapper;
	@Autowired
	private ProductOrderItemMapper productOrderItemMapper;
	@Autowired
	private AddressMapper addressMapper;
	@Autowired
	private StoreMapper storeMapper;
	@Autowired
	private UserMapper userMapper;
	@Autowired
	private TotalOrderMapper totalOrderMapper;
	@Autowired
	private ProxyGoodsMapper proxyGoodsMapper;
	@Autowired
	private ProxyOrderMapper proxyOrderMapper;
	@Autowired
	private IAccountService accountService;
	@Autowired
	private IAccountFlowService accountFlowService;

	// @Override
	// public Map<String, Object> submitOrder(List<Map<String, String>> maps) {
	// // 总订单
	// BigDecimal totalOrderPrice = ConstUtil.ZERO;
	// BigDecimal totalOrderPay = ConstUtil.ZERO;
	// TotalOrder totalOrder = new TotalOrder();
	// // 取出用户id
	// Map<String, String> userMap = maps.get(0);
	// Long userId = Long.valueOf(userMap.get("userId"));
	// maps.remove(0);
	// // 生成总订单
	// totalOrder.setOrderNum(OrderNumUtil.getOrderNum(userId));
	// totalOrderMapper.save(totalOrder);
	// // 取出收货地址id
	// Map<String, String> addressMap = maps.get(0);
	// Long addressId = Long.valueOf(addressMap.get("addressId"));
	// // 获取收货信息
	// Address address = addressMapper.get(addressId);
	// maps.remove(0);
	//
	// while (maps.size() > 0) {
	// // 取出集合中第一个
	// Map<String, String> productMap = maps.get(0);
	// Long productId = Long.valueOf(productMap.get("productId"));
	// Product product = productMapper.get(productId);
	// Long storeId = product.getGoods().getStore().getId();
	// // 获取店铺信息
	// Store store = storeMapper.get(storeId);
	// // 生成一个商品订单
	// ProductOrder productOrder = new ProductOrder();
	// productOrder.setAddress(address);
	// productOrder.setBuyTime(new Date());
	// productOrder.setUser(new User(userId));
	// productOrder.setStore(store);
	// productOrder.setOrderNum(OrderNumUtil.getOrderNum(userId));
	// productOrder.setTotalOrder(totalOrder);
	//
	// productOrderMapper.save(productOrder);
	//
	// BigDecimal totalPrice = ConstUtil.ZERO;// 订单总价
	// BigDecimal postage = new BigDecimal(10000);// 邮费
	//
	// // 遍历集合,将店铺相同的放入订单
	// for (Iterator<Map<String, String>> it = maps.iterator(); it
	// .hasNext();) {
	// Map<String, String> map = it.next();
	// Long proId = Long.valueOf(map.get("productId"));
	// Product pro = productMapper.get(proId);
	// Goods goods = pro.getGoods();
	// Long stoId = goods.getStore().getId();
	// if (stoId == storeId) {
	// // 生成单个订单明细
	// BigDecimal price = new BigDecimal(map.get("price"));
	// BigDecimal amount = new BigDecimal(map.get("amount"));
	// Integer num = Integer.valueOf(map.get("num"));
	// // 判断库存
	// if (pro.getInventoryNum() < num) {
	// productOrderItemMapper.delete(productOrder.getId());
	// totalOrderMapper.delete(totalOrder.getId());
	// throw new LogicException(goods.getName()
	// + pro.getSpecification() + "库存不足!",
	// StateCode.GOODS_NONUM);
	// }
	// // 更新库存
	// int updateNum = productMapper.updateNum(product);
	// if (updateNum == 0) {
	// productOrderItemMapper.delete(productOrder.getId());
	// totalOrderMapper.delete(totalOrder.getId());
	// throw new LogicException(goods.getName()
	// + pro.getSpecification() + "库存不足!",
	// StateCode.GOODS_NONUM);
	// }
	//
	// ProductOrderItem item = new ProductOrderItem(price, num,
	// amount, productOrder, product);
	// productOrderItemMapper.save(item);
	//
	// // 累加订单总价
	// totalPrice = totalPrice.add(amount);
	// // 计算邮费,以最低价为邮费
	// if (postage.compareTo(goods.getPostage()) == 1) {
	// postage = goods.getPostage();
	// }
	// // 从集合去掉这条数据
	// it.remove();
	// }
	// }
	// // 设置订单其他信息
	// productOrder.setMessage("收货人:" + address.getName() + ";电话:"
	// + address.getPhone() + ";地址:" + address.getAddress()
	// + ";店铺:" + store.getName());
	// productOrder.setTotalPrice(totalPrice.add(postage));
	// productOrder.setPayPrice(totalPrice.add(postage));
	// productOrder.setPostage(postage);
	// productOrderMapper.update(productOrder);
	// // 累加总订单价格
	// totalOrderPrice = totalOrderPrice.add(productOrder.getTotalPrice());
	// totalOrderPay = totalOrderPay.add(productOrder.getPayPrice());
	// }
	// totalOrder.setTotalPrice(totalOrderPrice);
	// totalOrder.setPayPrice(totalOrderPay);
	// totalOrderMapper.update(totalOrder);
	//
	// // 封装返回的订单数据
	// Map<String, Object> map = new HashMap<String, Object>();
	// map.put("totalPrice", totalOrderPrice);
	// map.put("payPrice", totalOrderPay);
	// map.put("orderNum", totalOrder.getOrderNum());
	//
	// return map;
	// }

	@Override
	public Map<String, Object> submitOrder(ProductOrderItemList items,
			Long userId, Long addressId, Long customerId, Long proxyGoodsId) {
		User user = new User(userId);
		Customer customer = new Customer(customerId);
		// 总订单
		BigDecimal totalOrderPrice = ConstUtil.ZERO;
		BigDecimal totalOrderPay = ConstUtil.ZERO;
		TotalOrder totalOrder = new TotalOrder();
		if (userId != null) {
			totalOrder.setOrderNum(OrderNumUtil.getOrderNum(userId));
		} else {
			totalOrder.setOrderNum(OrderNumUtil.getOrderNum(customerId));
		}
		totalOrderMapper.save(totalOrder);
		// 获取收货信息
		Address address = addressMapper.get(addressId);

		List<ProductOrderItem> productOrderItems = items.getProductOrderItems();
		while (productOrderItems.size() > 0) {
			// 取出集合中第一个
			ProductOrderItem item = productOrderItems.get(0);
			Long productId = item.getProduct().getId();
			Product product = productMapper.get(productId);
			Long storeId = product.getGoods().getStore().getId();
			// 获取店铺信息
			Store store = storeMapper.get(storeId);
			// 生成一个商品订单
			ProductOrder productOrder = new ProductOrder();
			productOrder.setAddress(address);
			productOrder.setStore(store);
			Date date = new Date();
			productOrder.setBuyTime(date);
			String orderNum = "";
			if (userId != null) {
				orderNum = OrderNumUtil.getOrderNum(userId);
				productOrder.setUser(user);
			} else {
				orderNum = OrderNumUtil.getOrderNum(customerId);
				productOrder.setCustomer(customer);
			}
			productOrder.setOrderNum(orderNum);
			productOrder.setTotalOrder(totalOrder);

			productOrderMapper.save(productOrder);

			BigDecimal totalPrice = ConstUtil.ZERO;// 订单总价
			BigDecimal postage = new BigDecimal(10000);// 邮费
			BigDecimal proxyPrice = ConstUtil.ZERO;// 代理费用
			// 遍历集合,将店铺相同的放入订单
			for (Iterator<ProductOrderItem> it = productOrderItems.iterator(); it
					.hasNext();) {
				ProductOrderItem poi = it.next();
				Long proId = poi.getProduct().getId();
				Product pro = productMapper.get(proId);
				Goods goods = pro.getGoods();
				Long stoId = goods.getStore().getId();
				// 累加计算代理的费用
				proxyPrice.add(poi.getPrice().subtract(goods.getSalePrice())
						.multiply(new BigDecimal(poi.getNum())));
				// 判断是否放入订单
				if (stoId == storeId) {
					// 判断库存
					if (pro.getInventoryNum() < poi.getNum() || goods.getInventoryNum() < poi.getNum()) {
						productOrderItemMapper.delete(productOrder.getId());
						totalOrderMapper.delete(totalOrder.getId());
						throw new LogicException(goods.getName()
								+ pro.getSpecification() + "库存不足!",
								StateCode.GOODS_NONUM);
					}
					// 更新库存
					pro.setInventoryNum(pro.getInventoryNum() - poi.getNum());
					goods.setInventoryNum(goods.getInventoryNum() - poi.getNum());
					int updateNum = productMapper.updateNum(pro);
					int updateNum2 = goodsMapper.updateNum(goods);
					if (updateNum == 0 || updateNum2 == 0) {
						productOrderItemMapper.delete(productOrder.getId());
						totalOrderMapper.delete(totalOrder.getId());
						throw new LogicException(goods.getName()
								+ pro.getSpecification() + "系统繁忙,请重试!",
								StateCode.GOODS_NONUM);
					}

					poi.setProductOrder(productOrder);
					productOrderItemMapper.save(poi);

					// 累加订单总价
					totalPrice = totalPrice.add(poi.getAmount());
					// 计算邮费,以最低价为邮费
					if (postage.compareTo(goods.getPostage()) == 1) {
						postage = goods.getPostage();
					}
					// 从集合去掉这条数据
					it.remove();
				}
			}
			// 设置订单其他信息
			productOrder.setMessage("收货人:" + address.getName() + ";电话:"
					+ address.getPhone() + ";地址:" + address.getAddress()
					+ ";店铺:" + store.getName());
			productOrder.setTotalPrice(totalPrice.add(postage));
			productOrder.setPayPrice(totalPrice.add(postage));
			productOrder.setProxyPrice(proxyPrice);
			productOrder.setPostage(postage);
			// 代理人和代理订单
			if (proxyGoodsId != null) {
				ProxyGoods proxyGoods = proxyGoodsMapper.get(proxyGoodsId);
				productOrder.setProxyUser(proxyGoods.getUser());
				ProxyOrder proxyOrder = new ProxyOrder(date, orderNum,
						proxyPrice, user, customer, store, orderNum);
				proxyOrderMapper.save(proxyOrder);
			}
			productOrderMapper.update(productOrder);
			// 累加总订单价格
			totalOrderPrice = totalOrderPrice.add(productOrder.getTotalPrice());
			totalOrderPay = totalOrderPay.add(productOrder.getPayPrice());
		}
		totalOrder.setTotalPrice(totalOrderPrice);
		totalOrder.setPayPrice(totalOrderPay);
		totalOrderMapper.update(totalOrder);

		// 封装返回的订单数据
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("totalPrice", totalOrderPrice);
		map.put("payPrice", totalOrderPay);
		map.put("orderNum", totalOrder.getOrderNum());
		return map;
	}

	@Override
	public PageResult<ProductOrder> query(ProductOrderQuery qu) {
		// 统计查询
		Long total = productOrderMapper.queryTotal(qu);
		// 分页查询
		List<ProductOrder> rows = productOrderMapper.query(qu);
		return new PageResult<ProductOrder>(rows, qu.getPageSize(),
				qu.getCurrentPage(), total.intValue());
	}

	@Override
	public List<ProductOrder> getByTotalOrderNum(String totalOrderNum) {
		List<ProductOrder> orders = productOrderMapper
				.getByTotalOrderNum(totalOrderNum);
		return orders;
	}

	@Override
	public void completeOrder(ProductOrder productOrder) {
		BigDecimal totalPrice = productOrder.getTotalPrice();
		Store store = productOrder.getStore();
		User user = userMapper.getByStore(store.getId());// 实际卖家
		User proxyUser = userMapper.get(productOrder.getProxyUser().getId());// 代理人
		// 判断是否是代理订单
		if (proxyUser != null) {
			BigDecimal proxyPrice = productOrder.getProxyPrice();// 代理收入
			totalPrice = totalPrice.subtract(proxyPrice);// 店铺收入
			// 计算代理人及其上家收入
			BigDecimal percentage = new BigDecimal(
					ReadProperties.getPercentage());
			Integer tier = new Integer(ReadProperties.getTier());
			dividend(proxyUser, proxyPrice, percentage, tier);
		}
		// 更改订单状态
		productOrder.setState(ConstUtil.ORDER_WAIT_FINISH);
		// 更新用户账户信息
		// User user = productOrder.getUser();
		Account account = accountService.updateByUser(user.getId(), totalPrice,
				ConstUtil.ACCOUNT_ACTIONTYPE_SALEINCOME);
		// 创建账户流水
		accountFlowService.createAccountFlow(
				ConstUtil.ACCOUNT_ACTIONTYPE_SALEINCOME, totalPrice, account,
				"销售收入");
		// 创建购买记录
		// .............................
	}

	/**
	 * 计算代理提成的递归方法
	 * 
	 * @param proxyUser
	 *            代理人
	 * @param proxyPrice
	 *            代理收入
	 * @param percentage
	 *            提成比例
	 * @param tier
	 *            能够提成的上家层数
	 */
	private void dividend(User proxyUser, BigDecimal proxyPrice,
			BigDecimal percentage, Integer tier) {
		if (tier == 0) {
			return;
		}
		User user = userMapper.getByCode(proxyUser.getUseCode());
		if (user != null) {
			// 应得分成
			BigDecimal price = proxyPrice.subtract(proxyPrice
					.multiply(percentage));
			// 更新账户信息
			Account account = accountService.updateByUser(user.getId(), price,
					ConstUtil.ACCOUNT_ACTIONTYPE_PROXYINCOME);
			// 创建账户流水
			accountFlowService.createAccountFlow(
					ConstUtil.ACCOUNT_ACTIONTYPE_PROXYINCOME, price, account,
					"代理提成");
			// 计算上级代理提成
			dividend(user, price, percentage, tier - 1);
		}
	}
}
