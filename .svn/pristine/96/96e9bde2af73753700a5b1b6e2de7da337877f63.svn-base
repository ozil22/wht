package com.huashidai.weihuotong.service.impl;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.huashidai.weihuotong.domain.AdPositionId;
import com.huashidai.weihuotong.domain.Promotion;
import com.huashidai.weihuotong.domain.PromotionOrder;
import com.huashidai.weihuotong.domain.TotalOrder;
import com.huashidai.weihuotong.domain.User;
import com.huashidai.weihuotong.exception.LogicException;
import com.huashidai.weihuotong.mapper.AdPositionIdMapper;
import com.huashidai.weihuotong.mapper.PromotionMapper;
import com.huashidai.weihuotong.mapper.PromotionOrderMapper;
import com.huashidai.weihuotong.mapper.TotalOrderMapper;
import com.huashidai.weihuotong.service.IPromotionOrderService;
import com.huashidai.weihuotong.utils.ConstUtil;
import com.huashidai.weihuotong.utils.DateUtil;
import com.huashidai.weihuotong.utils.FileUtil;
import com.huashidai.weihuotong.utils.OrderNumUtil;
import com.huashidai.weihuotong.utils.StateCode;

@Service
public class PromotionOrderServiceImpl implements IPromotionOrderService {

	@Autowired
	private PromotionMapper promotionMapper;
	@Autowired
	private PromotionOrderMapper promotionOrderMapper;
	@Autowired
	private TotalOrderMapper totalOrderMapper;
	@Autowired
	private AdPositionIdMapper adPositionIdMapper;

	@Override
	public Map<String,Object> submitOrder(Promotion promotion, MultipartFile image) throws ParseException, IOException {
		Map<String, Object> map = new HashMap<String,Object>();
		Long adId = promotion.getAdPositionId().getId();
		Date beginTime = promotion.getBeginTime();
		Date endTime = promotion.getEndTime();
		//判断时间是否重叠
		boolean checkPromotionTime = checkPromotionTime(beginTime, endTime, adId);
		if (checkPromotionTime) {
			throw new LogicException("您选择的时间部分已售出,提交失败!!", StateCode.PROMOTION_NOTBUY);
		}
		//计算价格
		AdPositionId adPositionId = adPositionIdMapper.get(adId);
		int betweenDays = DateUtil.betweenDays(beginTime, endTime);
		BigDecimal price = adPositionId.getDayPrice().multiply(new BigDecimal(betweenDays));
		promotion.setPrice(adPositionId.getDayPrice().multiply(new BigDecimal(betweenDays)));
		//保存图片
		String src = FileUtil.saveFile(image, "promotion");
		promotion.setImage(src);
		promotionMapper.save(promotion);
		//=======================生成订单==================================
		User user = promotion.getUser();
		String orderNum = OrderNumUtil.getOrderNum(user.getId());
		//总订单,用于支付
		TotalOrder totalOrder = new TotalOrder();
		totalOrder.setTotalPrice(price);
		totalOrder.setTotalPrice(price);
		totalOrder.setOrderNum(OrderNumUtil.PROMOTION_PRE +orderNum);;
		totalOrderMapper.save(totalOrder);
		//广告订单
		PromotionOrder promotionOrder = new PromotionOrder();
		promotionOrder.setBuyTime(new Date());
		promotionOrder.setOrderNum(orderNum);
		promotionOrder.setPromotion(promotion);
		promotionOrder.setTotalPrice(price);
		promotionOrder.setPayPrice(price);
		promotionOrder.setTotalOrder(totalOrder);
		promotionOrder.setUser(user);
		promotionOrderMapper.save(promotionOrder);
		//封装返回内容
		map.put("orderNum", orderNum);
		map.put("totalPrice", promotionOrder.getTotalPrice());
		map.put("payPrice", promotionOrder.getPayPrice());
		map.put("totalPrice", promotionOrder.getTotalPrice());
		return map;
	}

	@Override
	public List<PromotionOrder> getByTotalOrderNum(String totalOrderNum) {
		List<PromotionOrder> orders = promotionOrderMapper
				.getByTotalOrderNum(totalOrderNum);
		return orders;
	}

	@Override
	public void completeOrder(PromotionOrder promotionOrder) {
		//更改订单状态
		promotionOrder.setState(ConstUtil.PROMOTION_ORDER_FINISH);
		promotionOrderMapper.updateState(promotionOrder);
		//更改广告状态
		Promotion promotion = promotionOrder.getPromotion();
		promotion.setState(ConstUtil.PROMOTION_NORMAL);
		promotionMapper.updateState(promotion);
	}
	
	/**
	 * 判断该广告位售出的广告时间是否与该时间段冲突
	 * @param begin 开始时间
	 * @param end 结束时间
	 * @param adPositionId 广告位id
	 * @return
	 */
	private boolean checkPromotionTime(Date begin,Date end,Long adPositionId){
		List<Promotion> promotions = promotionMapper.getByAd(adPositionId);
		for (Promotion promotion : promotions) {
			Date beginTime = promotion.getBeginTime();
			Date endTime = promotion.getEndTime();
			if (begin.compareTo(endTime)>0 || end.compareTo(beginTime)<0) {
				continue;
			}
			return true;
		}
		return false;
	}

	@Override
	public Map<String, Object> toBuyPromotion(Long adPositionId) {
		Map<String, Object> map = new HashMap<String,Object>();
		AdPositionId ap = adPositionIdMapper.get(adPositionId);
		map.put("dayPrice", ap.getDayPrice());
		//已售出时间段
		List<Object> list = new ArrayList<Object>();
		List<Promotion> promotions = promotionMapper.getByAd(adPositionId);
		for (Promotion promotion : promotions) {
			Map<String, Object> p = new HashMap<String,Object>();
			p.put("beginTime", promotion.getBeginTime());
			p.put("endTime", promotion.getEndTime());
			list.add(p);
		}
		map.put("times", list);
		return map;
	}
	
}
