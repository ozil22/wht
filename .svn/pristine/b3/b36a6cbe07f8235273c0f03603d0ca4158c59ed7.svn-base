package com.huashidai.weihuotong.pay;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.huashidai.weihuotong.domain.ProductOrder;
import com.huashidai.weihuotong.service.IAccountService;
import com.huashidai.weihuotong.service.IProductOrderService;
import com.huashidai.weihuotong.utils.AppResult;
import com.pingplusplus.Pingpp;
import com.pingplusplus.model.Charge;

@Controller
@RequestMapping("/pay")
public class PayController {
	@Autowired
	private IProductOrderService productOrderService;
	@Autowired
	private IAccountService accountService;
	
	/**
	 * 创建charge对象
	 * @param chargeParam
	 * @param appId
	 * @param apiKey
	 * @return
	 */
	@RequestMapping("/createCharge")
	@ResponseBody
	public AppResult createCharge(ChargeParam chargeParam, String appId, String apiKey) {
		AppResult appResult = null;
		try {
			Pingpp.apiKey = apiKey;
			Map<String, Object> chargeParams = new HashMap<String, Object>();
			Map<String, String> app = new HashMap<String, String>();
			app.put("id", appId);
			chargeParams.put("app", app);
			chargeParams.put("order_no", chargeParam.getOrder_no());
			chargeParams.put("amount", chargeParam.getAmount());
			chargeParams.put("channel", chargeParam.getChannel());
			chargeParams.put("currency", chargeParam.getCurrency());
			chargeParams.put("client_ip", chargeParam.getClient_ip());
			chargeParams.put("subject", chargeParam.getSubject());
			chargeParams.put("body", chargeParam.getBody());

			Charge.create(chargeParams);
			appResult = new AppResult("创建charge成功!");
		} catch (Exception e) {
			appResult = new AppResult();
		}
		return appResult;
	}
	/**
	 * 支付成功回调方法
	 * @param charge
	 */
	@RequestMapping("/callBack")
	public void callBack(Charge charge){
		//获取所有订单
		String orderNo = charge.getOrderNo();
		List<ProductOrder> orders = productOrderService.getByTotalOrderNum(orderNo);
		for (ProductOrder productOrder : orders) {
			productOrderService.completeOrder(productOrder);
		}
	}
}
