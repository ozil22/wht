package com.huashidai.weihuotong.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.huashidai.weihuotong.domain.Store;
import com.huashidai.weihuotong.domain.StoreFavorites;
import com.huashidai.weihuotong.mapper.StoreFavoritesMapper;
import com.huashidai.weihuotong.mapper.StoreMapper;
import com.huashidai.weihuotong.query.PageResult;
import com.huashidai.weihuotong.query.StoreFavoritesQuery;
import com.huashidai.weihuotong.service.IStoreFavoritesService;

@Service
public class StoreFavoritesServiceImpl implements IStoreFavoritesService {
	@Autowired
	private StoreFavoritesMapper storeFavoritesMapper;
	@Autowired
	private StoreMapper storeMapper;

	@Override
	public PageResult<StoreFavorites> query(StoreFavoritesQuery qu) {
		// 统计查询
		Long total = storeFavoritesMapper.queryTotal(qu);
		// 分页查询
		List<StoreFavorites> rows = storeFavoritesMapper.query(qu);
		return new PageResult<StoreFavorites>(rows, qu.getPageSize(), qu.getCurrentPage(), total.intValue());
	}

	@Override
	public Map<String, Object> queryMap(StoreFavoritesQuery qu) {
		Map<String, Object> map = new HashMap<String, Object>();
		PageResult<StoreFavorites> pageResult = query(qu);
		map.put("total", pageResult.getTotalPage());
		ArrayList<Object> sfs = new ArrayList<Object>();
		List<StoreFavorites> datas = pageResult.getRows();
		for (StoreFavorites a : datas) {
			Map<String, Object> sf = new HashMap<String, Object>();
			sf.put("id", a.getId());
			sf.put("time", a.getTime());
			sf.put("storeId", a.getStoreId());
			sf.put("storeName", a.getStoreName());
			sf.put("storeType", a.getStoreType());
			sfs.add(sf);
		}
		map.put("storeFavorites", sfs);
		return map;
	}

	@Override
	public Map<String,Object> updateStoreFavorites(Long storeId, Long userId) {
		Map<String, Object> map = new HashMap<String, Object>();
		StoreFavorites storeFavorites = storeFavoritesMapper.get(storeId, userId);
		if (storeFavorites != null) {
			storeFavoritesMapper.delete(storeFavorites.getId());
			//收藏量减一
			storeMapper.updateHot(-1, storeId);
			map.put("state", 0);
			return map;
		}
		StoreFavorites sf = new StoreFavorites();
		sf.setUserId(userId);
		sf.setTime(new Date());
		sf.setStoreId(storeId);
		Store store = storeMapper.get(storeId);
		sf.setStoreName(store.getName());
		storeFavoritesMapper.save(sf);
		//收藏量加一
		storeMapper.updateHot(1, storeId);
		map.put("state", 1);
		return map;
	}

	@Override
	public Map<String, Object> isFavorites(StoreFavoritesQuery qu) {
		Map<String, Object> map = new HashMap<String, Object>();
		Long queryTotal = storeFavoritesMapper.queryTotal(qu);
		if (queryTotal != 0) {
			map.put("isFavorites", 1);
		}else {
			map.put("isFavorites", 0);
		}
		return map;
	}

}
