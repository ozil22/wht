package com.huashidai.weihuotong.app;

/**
 * 用户相关的接口
 */
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.huashidai.weihuotong.domain.Address;
import com.huashidai.weihuotong.domain.Recommendation;
import com.huashidai.weihuotong.domain.Store;
import com.huashidai.weihuotong.domain.User;
import com.huashidai.weihuotong.domain.Withdraw;
import com.huashidai.weihuotong.exception.LogicException;
import com.huashidai.weihuotong.query.AccountFlowQuery;
import com.huashidai.weihuotong.query.MessageQuery;
import com.huashidai.weihuotong.query.ProxyLogQuery;
import com.huashidai.weihuotong.query.UserQuery;
import com.huashidai.weihuotong.service.IAccountFlowService;
import com.huashidai.weihuotong.service.IAccountService;
import com.huashidai.weihuotong.service.IAddressService;
import com.huashidai.weihuotong.service.IMessageService;
import com.huashidai.weihuotong.service.IProxyLogService;
import com.huashidai.weihuotong.service.IRecommendationService;
import com.huashidai.weihuotong.service.IUserImageService;
import com.huashidai.weihuotong.service.IUserService;
import com.huashidai.weihuotong.service.IWithdrawService;
import com.huashidai.weihuotong.utils.AppResult;

@Controller
@RequestMapping("/app")
public class UserAPP {
	@Autowired
	private IUserService userService;
	@Autowired
	private IUserImageService userImageService;
	@Autowired
	private IAddressService addressService;
	@Autowired
	private IAccountService accountService;
	@Autowired
	private IAccountFlowService accountFlowService;
	@Autowired
	private IProxyLogService proxyLogService;
	@Autowired
	private IMessageService messageService;
	@Autowired
	private IRecommendationService recommendationService;
	@Autowired
	private IWithdrawService withdrawService;

	/**
	 * 登录(或者绑定微信号)
	 * 
	 * @param username
	 * @param password
	 * @return
	 */
	@RequestMapping("/checkLogin")
	@ResponseBody
	public AppResult checkLogin(String username, String password,
			String wechat, String openid) {
		AppResult appResult = null;
		try {
			// 检查登陆
			User user = userService.findcheckLogin(username, password, wechat,
					openid);
			// 封装响应信息
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("userId", user.getId());
			Store store = user.getStore();
			if (store != null) {
				map.put("storeId", store.getId());
			}else {
				map.put("storeId", -1l);
			}
			map.put("wechat", user.getWechat());
			map.put("username", user.getUsername());
			appResult = new AppResult(map);
		} catch (LogicException e) {
			// 封装响应信息
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}
	/**
	 * 微信登录
	 * 
	 * @param username
	 * @param password
	 * @return
	 */
	@RequestMapping("/checkWechatLogin")
	@ResponseBody
	public AppResult checkWechatLogin(String wechat, String openid) {
		AppResult appResult = null;
		try {
			// 检查登陆
			User user = userService.checkWechatLogin( wechat,openid);
			// 封装响应信息
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put("userId", user.getId());
			Store store = user.getStore();
			if (store != null) {
				map.put("storeId", store.getId());
			}else {
				map.put("storeId", -1l);
			}
			map.put("wechat", user.getWechat());
			map.put("username", user.getUsername());
			appResult = new AppResult(map);
		} catch (LogicException e) {
			// 封装响应信息
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}

	/**
	 * 注册(或者绑定微信号)
	 * 
	 * @param username
	 * @param password
	 * @param userCode
	 * @return
	 */
	@RequestMapping("/register")
	@ResponseBody
	public AppResult register(String username, String password, String useCode,
			String wechat, String openid) {
		AppResult appResult = null;
		try {
			User user = userService.register(username, password, useCode,
					wechat, openid);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("userId", user.getId());
			appResult = new AppResult(map);
		} catch (LogicException e) {
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}
	/**
	 * 取消绑定微信
	 * 
	 * @param username
	 * @param password
	 * @return
	 */
	@RequestMapping("/removeWechat")
	@ResponseBody
	public AppResult removeWechat(String username, String password) {
		AppResult appResult = null;
		try {
			userService.removeWechat(username, password);
			appResult = new AppResult(null);
		} catch (LogicException e) {
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}
	
	

	/**
	 * 修改密码
	 * 
	 * @param username
	 * @param password
	 * @param invitationCode
	 * @return
	 */
	@RequestMapping("/updatePassword")
	@ResponseBody
	public AppResult updatePassword(String username, String password,
			String newPassword) {
		AppResult appResult = null;
		try {
			User user = userService.updatePassword(username, password,
					newPassword);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("userId", user.getId());
			appResult = new AppResult(map);
		} catch (LogicException e) {
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}

	/**
	 * 忘记密码
	 * 
	 * @param username
	 * @param password
	 * @param invitationCode
	 * @return
	 */
	@RequestMapping("/forgetPassword")
	@ResponseBody
	public AppResult forgetPassword(String username, String password) {
		AppResult appResult = null;
		try {
			User user = userService.forgetPassword(username, password);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("userId", user.getId());
			appResult = new AppResult(map);
		} catch (LogicException e) {
			appResult = new AppResult(e.getMessage(), e.getErrorCode());
		}
		return appResult;
	}

	/**
	 * 用户信息
	 * 
	 * @param userId
	 * @return
	 */
	@RequestMapping("/userInfo")
	@ResponseBody
	public AppResult userInfo(Long userId) {
		AppResult appResult = null;
		try {
			Map<String, Object> userInfo = userService.getUserInfo(userId);
			appResult = new AppResult(userInfo);
		} catch (LogicException e) {
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 修改用户展示图片
	 * 
	 * @param userId
	 * @param image
	 * @param mode
	 *            更新方式 0 添加 ,1 覆盖
	 * @return
	 */
	@RequestMapping("/updateUserImages")
	@ResponseBody
	public AppResult updateUserImages(
			@RequestParam("image") MultipartFile[] image, Long userId, int mode) {
		AppResult appResult = null;
		try {
			userImageService.updateByUser(image, userId, mode);
			appResult = new AppResult(null);
		} catch (IOException e) {
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 修改用户背景图片
	 * 
	 * @param userId
	 * @param image
	 * @return
	 */
	@RequestMapping("/updateBackground")
	@ResponseBody
	public AppResult updateBackground(
			@RequestParam("image") MultipartFile image, Long userId) {
		AppResult appResult = null;
		try {
			userService.updateBackground(image, userId);
			appResult = new AppResult(null);
		} catch (IOException e) {
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 新增收货地址
	 * 
	 * @param userId
	 * @param image
	 * @return
	 */
	@RequestMapping("/saveAddress")
	@ResponseBody
	public AppResult saveAddress(Address address) {
		AppResult appResult = null;
		try {
			addressService.save(address);
			appResult = new AppResult(null);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 修改收货地址
	 * 
	 * @param userId
	 * @param image
	 * @return
	 */
	@RequestMapping("/updateAddress")
	@ResponseBody
	public AppResult updateAddress(Address address) {
		AppResult appResult = null;
		try {
			addressService.update(address);
			appResult = new AppResult(null);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 设置为默认地址
	 * 
	 * @param id 地址id
	 * @return
	 */
	@RequestMapping("/updateDefault")
	@ResponseBody
	public AppResult updateDefault(Long id) {
		AppResult appResult = null;
		try {
			addressService.updateUserDefault(id);
			appResult = new AppResult(null);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 删除地址
	 * 
	 * @param id 地址id
	 * @return
	 */
	@RequestMapping("/deleteAddress")
	@ResponseBody
	public AppResult deleteAddress(Long id) {
		AppResult appResult = null;
		try {
			addressService.delete(id);
			appResult = new AppResult(null);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 获取用户所有地址
	 * 
	 * @param userId
	 * @param image
	 * @return
	 */
	@RequestMapping("/getAddress")
	@ResponseBody
	public AppResult getAddress(Long userId) {
		AppResult appResult = null;
		try {
			List<Object> adds = addressService.getByUser(userId);
			appResult = new AppResult(adds);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 查看我的收入
	 * 
	 * @param userId
	 * @return
	 */
	@RequestMapping("/userAccount")
	@ResponseBody
	public AppResult userAccount(Long userId) {
		AppResult appResult = null;
		try {
			Map<String, Object> account = accountService.getMapByUser(userId);
			appResult = new AppResult(account);
		} catch (Exception e) {
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 查看我的资金明细(账户流水)
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/userAccountFlow")
	@ResponseBody
	public AppResult userAccountFlow(AccountFlowQuery qu) {
		AppResult appResult = null;
		try {
			Map<String, Object> accountFlows = accountFlowService.queryMap(qu);
			appResult = new AppResult(accountFlows);
		} catch (Exception e) {
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 我的团队
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/userTeam")
	@ResponseBody
	public AppResult userTeam(Long userId,UserQuery qu) {
		AppResult appResult = null;
		try {
			Map<String, Object> map = userService.userTeam(userId,qu);
			appResult = new AppResult(map);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 我的转发
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/userProxy")
	@ResponseBody
	public AppResult userProxy(ProxyLogQuery qu) {
		AppResult appResult = null;
		try {
			Map<String, Object> map = proxyLogService.queryMap(qu);
			appResult = new AppResult(map);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}

	/**
	 * 系统消息
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/userMessage")
	@ResponseBody
	public AppResult userMessage(MessageQuery qu) {
		AppResult appResult = null;
		try {
			Map<String, Object> map = messageService.queryMap(qu);
			appResult = new AppResult(map);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}
	/**
	 * 系统消息
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/userMessageNum")
	@ResponseBody
	public AppResult userMessageNum(MessageQuery qu) {
		AppResult appResult = null;
		try {
			Map<String, Object> map = messageService.queryTotal(qu);
			appResult = new AppResult(map);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}
	/**
	 * 消息详情
	 * 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/enterMessage")
	@ResponseBody
	public AppResult enterMessage(Long messageId) {
		AppResult appResult = null;
		try {
			Map<String, Object> map = messageService.enterMessage(messageId);
			appResult = new AppResult(map);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}
	/**
	 * 消息详情
	 * @param qu
	 * @return
	 */
	@RequestMapping("/recommendation")
	@ResponseBody
	public AppResult recommendation(Recommendation recommendation) {
		AppResult appResult = null;
		try {
			recommendation.setTime(new Date());
			recommendationService.save(recommendation);
			appResult = new AppResult(null);
		} catch (Exception e) {
			e.printStackTrace();
			appResult = new AppResult();
		}
		return appResult;
	}
	/**
	 * 提现
	 * @param withdraw 
	 * @param qu
	 * @return
	 */
	@RequestMapping("/withdrawApply")
	@ResponseBody
	public AppResult withdrawApply(Withdraw withdraw) {
		AppResult appResult = null;
		try {
			withdrawService.withdrawApply(withdraw);
			appResult = new AppResult(null);
		} catch (LogicException e) {
			appResult = new AppResult(e.getMessage(),e.getErrorCode());
		}
		return appResult;
	}

}
